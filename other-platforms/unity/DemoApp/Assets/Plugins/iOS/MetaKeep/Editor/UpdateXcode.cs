// This file updates the Xcode project after it has been generated by Unity
// 1. It adds the URL Scheme for MetaKeep
// 2. It adds the MetaKeep iOS SDK framework to the project
#if UNITY_IOS

using UnityEngine;
using UnityEditor;
using UnityEditor.Callbacks;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using UnityEditor.iOS.Xcode;
using UnityEditor.iOS.Xcode.Extensions;

public static class UpdateXcode
{
    private const string frameworkPath = "Assets/Plugins/iOS/MetaKeep/vendor";
    private const string frameworkName = "MetaKeep.xcframework";
    private const string destinationPath = "Libraries/Plugins/iOS/MetaKeep";

    [PostProcessBuild(3)]
    public static void UpdateXCodeFiles(BuildTarget buildTarget, string pathToXCodeProject)
    {
        if (buildTarget != BuildTarget.iOS)
        {
            return;
        }

        AddMetaKeepFramework(pathToXCodeProject);

        AddURLScheme(pathToXCodeProject);

    }

    private static void AddMetaKeepFramework(string pathToXCodeProject)
    {
        // Copy the MetaKeep framework into the Xcode project
        string frameworkDestination = Path.Combine(pathToXCodeProject, destinationPath, frameworkName);
        if (!Directory.Exists(frameworkDestination))
        {
            Directory.CreateDirectory(frameworkDestination);
        }

        string frameworkSource = Path.Combine(frameworkPath, frameworkName);
        if (!Directory.Exists(frameworkSource))
        {
            Debug.LogError("MetaKeep framework not found at " + frameworkSource);
            return;
        }

        // Delete the destination directory if it exists
        if (Directory.Exists(frameworkDestination))
        {
            Directory.Delete(frameworkDestination, true);
        }

        // Copy the framework skipping meta files
        CopyDirectorySkippingMetaFiles(frameworkSource, frameworkDestination);

        // Add the framework to the Xcode project
        PBXProject project = new PBXProject();
        string projectPath = PBXProject.GetPBXProjectPath(pathToXCodeProject);
        project.ReadFromFile(projectPath);

        string targetGUID = project.GetUnityMainTargetGuid();
        string metakeepFrameworkGuid = project.AddFile(frameworkDestination, frameworkDestination, PBXSourceTree.Source);
        project.AddFileToEmbedFrameworks(targetGUID, metakeepFrameworkGuid);

        // If the framework target exists, add the reference to the framework target without embedding.
        string frameworkTargetGuid = project.GetUnityFrameworkTargetGuid();

        if (frameworkTargetGuid != null)
        {
            var buildPhaseGuid = project.GetFrameworksBuildPhaseByTarget(frameworkTargetGuid);
            project.AddFileToBuildSection(frameworkTargetGuid, buildPhaseGuid, metakeepFrameworkGuid);
        }

        // Stop unity from automatically adding the framework to the project
        project.RemoveFrameworkFromProject(targetGUID, "MetaKeep.framework");

        project.WriteToFile(projectPath);
    }

    private static void CopyDirectorySkippingMetaFiles(string source, string destination)
    {
        Directory.CreateDirectory(destination);
        foreach (var file in Directory.GetFiles(source))
        {
            if (file.EndsWith(".meta") || file.EndsWith(".DS_Store"))
            {
                continue;
            }
            File.Copy(file, Path.Combine(destination, Path.GetFileName(file)));
        }
        foreach (var dir in Directory.GetDirectories(source))
            CopyDirectorySkippingMetaFiles(dir, Path.Combine(destination, Path.GetFileName(dir)));
    }

    private static void AddURLScheme(string pathToXCodeProject)
    {
        // Add a URL Scheme for MetaKeep
        // - identifier: metakeep
        // - scheme: $(PRODUCT_BUNDLE_IDENTIFIER)

        string plistPath = pathToXCodeProject + "/Info.plist";
        PlistDocument plist = new PlistDocument();
        plist.ReadFromFile(plistPath);

        PlistElementDict rootDict = plist.root;

        // Get or create the URL Types array
        PlistElementArray urlTypesArray;
        PlistElement urlTypesElement;
        if (rootDict.values.TryGetValue("CFBundleURLTypes", out urlTypesElement))
        {
            urlTypesArray = urlTypesElement.AsArray();
        }
        else
        {
            urlTypesArray = rootDict.CreateArray("CFBundleURLTypes");
        }

        // Create a new URL Type
        PlistElementDict urlTypeDict = urlTypesArray.AddDict();
        urlTypeDict.SetString("CFBundleTypeRole", "Editor");
        urlTypeDict.SetString("CFBundleURLName", "metakeep");
        urlTypeDict.CreateArray("CFBundleURLSchemes").AddString("$(PRODUCT_BUNDLE_IDENTIFIER)");

        // Write to file
        File.WriteAllText(plistPath, plist.WriteToString());
    }
}

#endif