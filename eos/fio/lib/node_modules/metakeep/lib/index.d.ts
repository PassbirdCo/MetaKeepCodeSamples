declare interface InternalOptions {
    [key: string]: any;
}

/**
 * MetaKeep SDK
 *
 * @public
 */
export declare class MetaKeep {


    /**
     * Map of chainId to RPC node URL
     * @defaultValue Map()
     * @readonly
     */
    rpcNodeUrls: {
        [key: number]: string;
    };
    /**
     * Chain ID of the network
     * @defaultValue 137
     * @readonly
     */
    chainId: number;
    /**
     * App ID
     * @readonly
     */
    appId: string;

    /**
     * MetaKeep SDK
     */
    constructor(options: {
        appId: string;
        environment?: string;
        user?: any;
        chainId?: number;
        rpcNodeUrls?: {
            [key: number]: string;
        };
        internalOptions?: InternalOptions;
    });
    /**
     * EthereumProvider
     * @returns Promise that resolves to the EthereumProvider
     */
    get ethereum(): Promise<any>;


    /**
     * Get consent from the user
     * @param consentToken - Consent token
     * @returns Promise that resolves to the consent object
     */
    getConsent: (consentToken: string) => Promise<any>;
    /**
     * Sign a message
     * @param message - Message to sign
     * @param reason - Reason for signing the message
     * @returns Promise that resolves to the signed message
     */
    signMessage: (message: string, reason: string) => Promise<any>;
    /**
     * Sign a transaction
     * @param transactionObject - Transaction object
     * @param reason - Reason for signing the transaction
     * @returns Promise that resolves to the signed transaction
     */
    signTransaction: (transactionObject: any, reason: string) => Promise<any>;
    /**
     * Sign typed data
     * @param typedData - Typed data
     * @param reason - Reason for signing the typed data
     * @returns Promise that resolves to the signed typed data
     */
    signTypedData: (typedData: any, reason: string) => Promise<any>;

    /**
     * Get user wallet
     * @returns Promise that resolves to the user wallet
     */
    getWallet: () => Promise<any>;

}

export { }
