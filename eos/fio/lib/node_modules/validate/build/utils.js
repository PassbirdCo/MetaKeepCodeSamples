"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assign = assign;
exports.enumerate = enumerate;
exports.join = join;
exports.walk = walk;

var _dot = _interopRequireDefault(require("@eivifj/dot"));

var _componentType = _interopRequireDefault(require("component-type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Assign given key and value (or object) to given object
 *
 * @private
 */
function assign(key, val, obj) {
  if (typeof key == 'string') {
    obj[key] = val;
    return;
  }

  Object.keys(key).forEach(function (k) {
    return obj[k] = key[k];
  });
}
/**
 * Enumerate all permutations of `path`, replacing $ with array indices
 *
 * @private
 */


function enumerate(path, obj, callback) {
  var parts = path.split(/\.\$(?=\.|$)/);
  var first = parts.shift();

  var arr = _dot["default"].get(obj, first);

  if (!parts.length) {
    return callback(first, arr);
  }

  if (!Array.isArray(arr)) {
    return;
  }

  for (var i = 0; i < arr.length; i++) {
    var current = join(i, first);
    var next = current + parts.join('.$');
    enumerate(next, obj, callback);
  }
}
/**
 * Walk object and call `callback` with path and prop name
 *
 * @private
 */


function walk(obj, callback, path, prop) {
  var type = (0, _componentType["default"])(obj);

  if (type === 'array') {
    obj.forEach(function (v, i) {
      return walk(v, callback, join(i, path), join('$', prop));
    });
    return;
  }

  if (type !== 'object') {
    return;
  }

  for (var _i = 0, _Object$entries = Object.entries(obj); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        val = _Object$entries$_i[1];

    var newPath = join(key, path);
    var newProp = join(key, prop);

    if (callback(newPath, newProp)) {
      walk(val, callback, newPath, newProp);
    }
  }
}
/**
 * Join `path` with `prefix`
 *
 * @private
 */


function join(path, prefix) {
  return prefix ? "".concat(prefix, ".").concat(path) : path;
}